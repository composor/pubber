{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["/**\n * @type {object} s\n */\nconst s = {}\nconst h = s.hasOwnProperty\n\n/**\n * Function to dispatch a topic and payload\n * @param {string} topic The topic to listen for.\n * @param {string|number|boolean|object|array} payload Any data to pass with the dispatch.\n * @returns void\n */\nexport const dispatch = (topic, payload) => {\n  if (!h.call(s, topic)) return\n  s[topic].callback.map((item) => {\n    item(payload != undefined ? payload : {})\n    s[topic].once && unsubscribe(topic)\n  })\n}\n\n/**\n * Function to subscribe to dispatches.\n * @param {string} topic The topic for the subscription.\n * @param {function} callback A function to execute when the dispatched topic matches.\n * @param {boolean} once If true, the subscription will fire only once. After that it unsubscribes itself.\n * @returns void\n */\nexport const subscribe = (topic, callback, once) => {\n  !h.call(s, topic) && (s[topic] = {topic, callback: [], once})\n  const index = s[topic].callback.push(callback) - 1\n}\n\n/**\n * @description Function to unsbuscribe from a topic.\n * @param {string} topic The topic to unsubscribe.\n * @returns void\n */\nexport const unsubscribe = (topic) => delete s[topic]\n"],"names":["s","h","hasOwnProperty","unsubscribe","topic","payload","call","callback","map","item","undefined","once","push"],"mappings":"yLAGA,IAAMA,EAAI,GACJC,EAAID,EAAEE,eAiCCC,EAAc,SAACC,iBAAiBJ,EAAEI,eAzBvB,SAACA,EAAOC,GACzBJ,EAAEK,KAAKN,EAAGI,MACbA,GAAOG,SAASC,IAAI,SAACC,KACLC,MAAXL,EAAuBA,EAAU,MACpCD,GAAOO,MAAQR,EAAYC,kBAWR,SAACA,EAAOG,EAAUI,IACxCV,EAAEK,KAAKN,EAAGI,KAAWJ,EAAEI,GAAS,CAACA,QAAOG,SAAU,GAAII,SACzCX,EAAEI,GAAOG,SAASK,KAAKL"}